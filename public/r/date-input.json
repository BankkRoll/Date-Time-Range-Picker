{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-input",
  "type": "registry:component",
  "title": "Date Input",
  "description": "A component for inputting dates with separate fields.",
  "dependencies": [],
  "registryDependencies": ["input"],
  "files": [
    {
      "path": "registry/default/date-time-range-picker/date-input.tsx",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\n\ninterface DateInputProps {\n  value?: Date;\n  onChange: (date: Date) => void;\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DateParts {\n  day: number;\n  month: number;\n  year: number;\n}\n\nconst DateInput: React.FC<DateInputProps> = ({\n  value,\n  onChange,\n  disabled = false,\n  className,\n}) => {\n  const [date, setDate] = React.useState<DateParts>(() => {\n    const d = value ? new Date(value) : new Date();\n    return {\n      day: d.getDate(),\n      month: d.getMonth() + 1,\n      year: d.getFullYear(),\n    };\n  });\n\n  const monthRef = React.useRef<HTMLInputElement | null>(null);\n  const dayRef = React.useRef<HTMLInputElement | null>(null);\n  const yearRef = React.useRef<HTMLInputElement | null>(null);\n\n  React.useEffect(() => {\n    const d = value ? new Date(value) : new Date();\n    setDate({\n      day: d.getDate(),\n      month: d.getMonth() + 1,\n      year: d.getFullYear(),\n    });\n  }, [value]);\n\n  const validateDate = (field: keyof DateParts, value: number): boolean => {\n    if (\n      (field === \"day\" && (value < 1 || value > 31)) ||\n      (field === \"month\" && (value < 1 || value > 12)) ||\n      (field === \"year\" && (value < 1000 || value > 9999))\n    ) {\n      return false;\n    }\n\n    const newDate = { ...date, [field]: value };\n    const d = new Date(newDate.year, newDate.month - 1, newDate.day);\n    return (\n      d.getFullYear() === newDate.year &&\n      d.getMonth() + 1 === newDate.month &&\n      d.getDate() === newDate.day\n    );\n  };\n\n  const handleInputChange =\n    (field: keyof DateParts) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) return;\n\n      const newValue = e.target.value ? Number(e.target.value) : \"\";\n      const isValid =\n        typeof newValue === \"number\" && validateDate(field, newValue);\n\n      const newDate = { ...date, [field]: newValue };\n      setDate(newDate);\n\n      if (isValid) {\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n      }\n    };\n\n  const initialDate = React.useRef<DateParts>(date);\n\n  const handleBlur =\n    (field: keyof DateParts) =>\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      if (disabled) return;\n\n      if (!e.target.value) {\n        setDate(initialDate.current);\n        return;\n      }\n\n      const newValue = Number(e.target.value);\n      const isValid = validateDate(field, newValue);\n\n      if (!isValid) {\n        setDate(initialDate.current);\n      } else {\n        initialDate.current = { ...date, [field]: newValue };\n      }\n    };\n\n  const handleKeyDown =\n    (field: keyof DateParts) => (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (disabled) return;\n\n      if (e.metaKey || e.ctrlKey) {\n        return;\n      }\n\n      if (\n        !/^[0-9]$/.test(e.key) &&\n        ![\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"ArrowRight\",\n          \"Delete\",\n          \"Tab\",\n          \"Backspace\",\n          \"Enter\",\n        ].includes(e.key)\n      ) {\n        e.preventDefault();\n        return;\n      }\n\n      if (e.key === \"ArrowUp\") {\n        e.preventDefault();\n        let newDate = { ...date };\n\n        if (field === \"day\") {\n          if (date[field] === new Date(date.year, date.month, 0).getDate()) {\n            newDate = { ...newDate, day: 1, month: (date.month % 12) + 1 };\n            if (newDate.month === 1) newDate.year += 1;\n          } else {\n            newDate.day += 1;\n          }\n        }\n\n        if (field === \"month\") {\n          if (date[field] === 12) {\n            newDate = { ...newDate, month: 1, year: date.year + 1 };\n          } else {\n            newDate.month += 1;\n          }\n        }\n\n        if (field === \"year\") {\n          newDate.year += 1;\n        }\n\n        setDate(newDate);\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n      } else if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        let newDate = { ...date };\n\n        if (field === \"day\") {\n          if (date[field] === 1) {\n            newDate.month -= 1;\n            if (newDate.month === 0) {\n              newDate.month = 12;\n              newDate.year -= 1;\n            }\n            newDate.day = new Date(newDate.year, newDate.month, 0).getDate();\n          } else {\n            newDate.day -= 1;\n          }\n        }\n\n        if (field === \"month\") {\n          if (date[field] === 1) {\n            newDate = { ...newDate, month: 12, year: date.year - 1 };\n          } else {\n            newDate.month -= 1;\n          }\n        }\n\n        if (field === \"year\") {\n          newDate.year -= 1;\n        }\n\n        setDate(newDate);\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n      }\n\n      if (e.key === \"ArrowRight\") {\n        if (\n          e.currentTarget.selectionStart === e.currentTarget.value.length ||\n          (e.currentTarget.selectionStart === 0 &&\n            e.currentTarget.selectionEnd === e.currentTarget.value.length)\n        ) {\n          e.preventDefault();\n          if (field === \"month\") dayRef.current?.focus();\n          if (field === \"day\") yearRef.current?.focus();\n        }\n      } else if (e.key === \"ArrowLeft\") {\n        if (\n          e.currentTarget.selectionStart === 0 ||\n          (e.currentTarget.selectionStart === 0 &&\n            e.currentTarget.selectionEnd === e.currentTarget.value.length)\n        ) {\n          e.preventDefault();\n          if (field === \"day\") monthRef.current?.focus();\n          if (field === \"year\") dayRef.current?.focus();\n        }\n      }\n    };\n\n  return (\n    <div\n      className={cn(\n        \"flex border rounded-lg items-center text-sm px-1\",\n        className,\n      )}\n    >\n      <Input\n        type=\"text\"\n        ref={monthRef}\n        max={12}\n        maxLength={2}\n        value={date.month.toString()}\n        onChange={handleInputChange(\"month\")}\n        onKeyDown={handleKeyDown(\"month\")}\n        onFocus={(e) => {\n          if (window.innerWidth > 1024) {\n            e.target.select();\n          }\n        }}\n        onBlur={handleBlur(\"month\")}\n        className=\"p-0 outline-none w-6 border-none text-center\"\n        placeholder=\"M\"\n        disabled={disabled}\n      />\n      <span className=\"opacity-20 -mx-px\">/</span>\n      <Input\n        type=\"text\"\n        ref={dayRef}\n        max={31}\n        maxLength={2}\n        value={date.day.toString()}\n        onChange={handleInputChange(\"day\")}\n        onKeyDown={handleKeyDown(\"day\")}\n        onFocus={(e) => {\n          if (window.innerWidth > 1024) {\n            e.target.select();\n          }\n        }}\n        onBlur={handleBlur(\"day\")}\n        className=\"p-0 outline-none w-7 border-none text-center\"\n        placeholder=\"D\"\n        disabled={disabled}\n      />\n      <span className=\"opacity-20 -mx-px\">/</span>\n      <Input\n        type=\"text\"\n        ref={yearRef}\n        max={9999}\n        maxLength={4}\n        value={date.year.toString()}\n        onChange={handleInputChange(\"year\")}\n        onKeyDown={handleKeyDown(\"year\")}\n        onFocus={(e) => {\n          if (window.innerWidth > 1024) {\n            e.target.select();\n          }\n        }}\n        onBlur={handleBlur(\"year\")}\n        className=\"p-0 outline-none w-12 border-none text-center\"\n        placeholder=\"YYYY\"\n        disabled={disabled}\n      />\n    </div>\n  );\n};\n\nDateInput.displayName = \"DateInput\";\n\nexport { DateInput };\n",
      "type": "registry:component"
    }
  ]
}
