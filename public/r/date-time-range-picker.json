{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-range-picker",
  "type": "registry:component",
  "title": "Date Time Range Picker",
  "description": "A component for selecting a range of dates and times.",
  "dependencies": ["date-fns", "date-fns/locale", "lucide-react"],
  "registryDependencies": ["button", "calendar", "popover"],
  "files": [
    {
      "path": "registry/default/date-time-range-picker/date-time-range-picker.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  addMonths,\n  endOfDay,\n  endOfMonth,\n  endOfWeek,\n  format,\n  isEqual,\n  isValid,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n  subDays,\n  subMonths,\n} from \"date-fns\";\nimport { enUS, type Locale } from \"date-fns/locale\";\nimport { CalendarIcon, CheckIcon, ChevronRightIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { DateTimeInput } from \"./date-time-input\";\n\nexport interface DateTimeRange {\n  from: Date | undefined;\n  to: Date | undefined;\n}\n\ninterface Preset {\n  name: string;\n  label: string;\n}\n\nconst PRESETS: Preset[] = [\n  { name: \"last7\", label: \"Last 7 days\" },\n  { name: \"last14\", label: \"Last 14 days\" },\n  { name: \"last30\", label: \"Last 30 days\" },\n  { name: \"thisWeek\", label: \"This Week\" },\n  { name: \"lastWeek\", label: \"Last Week\" },\n  { name: \"thisMonth\", label: \"This Month\" },\n  { name: \"lastMonth\", label: \"Last Month\" },\n];\n\nexport interface DateTimeRangePickerProps {\n  onUpdate?: (values: { range: DateTimeRange }) => void;\n  initialDateFrom?: Date | string;\n  initialDateTo?: Date | string;\n  align?: \"start\" | \"center\" | \"end\";\n  locale?: Locale;\n  className?: string;\n}\n\nconst formatDateTime = (\n  date: Date | undefined,\n  locale: Locale = enUS,\n): string => {\n  if (!date || !isValid(date)) return \"Select date\";\n  return format(date, \"PPP p\", { locale });\n};\n\nconst getDateAdjustedForTimezone = (\n  dateInput: Date | string | undefined,\n): Date | undefined => {\n  if (!dateInput) return undefined;\n  if (typeof dateInput === \"string\") {\n    const parts = dateInput.split(\"-\").map((part) => Number.parseInt(part, 10));\n    return new Date(parts[0], parts[1] - 1, parts[2]);\n  }\n  return new Date(dateInput);\n};\n\nexport const DateTimeRangePicker: React.FC<DateTimeRangePickerProps> = ({\n  initialDateFrom,\n  initialDateTo,\n  onUpdate,\n  align = \"center\",\n  locale = enUS,\n  className,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [range, setRange] = React.useState<DateTimeRange>({\n    from: getDateAdjustedForTimezone(initialDateFrom),\n    to: getDateAdjustedForTimezone(initialDateTo),\n  });\n\n  const openedRangeRef = React.useRef<DateTimeRange>(range);\n  const [selectedPreset, setSelectedPreset] = React.useState<\n    string | undefined\n  >(undefined);\n  const [calendarMonths, setCalendarMonths] = React.useState<[Date, Date]>([\n    new Date(),\n    addMonths(new Date(), 1),\n  ]);\n\n  const getPresetRange = React.useCallback(\n    (presetName: string): DateTimeRange => {\n      const now = new Date();\n      const today = startOfDay(now);\n      const endToday = endOfDay(now);\n\n      switch (presetName) {\n        case \"today\":\n          return { from: today, to: endToday };\n        case \"yesterday\": {\n          const yesterday = subDays(today, 1);\n          return { from: yesterday, to: endOfDay(yesterday) };\n        }\n        case \"last7\":\n          return { from: subDays(today, 6), to: endToday };\n        case \"last14\":\n          return { from: subDays(today, 13), to: endToday };\n        case \"last30\":\n          return { from: subDays(today, 29), to: endToday };\n        case \"thisWeek\":\n          return {\n            from: startOfWeek(today, { weekStartsOn: 0 }),\n            to: endToday,\n          };\n        case \"lastWeek\": {\n          const lastWeekStart = startOfWeek(subDays(today, 7), {\n            weekStartsOn: 0,\n          });\n          const lastWeekEnd = endOfWeek(lastWeekStart, { weekStartsOn: 0 });\n          return {\n            from: lastWeekStart,\n            to: lastWeekEnd,\n          };\n        }\n        case \"thisMonth\":\n          return {\n            from: startOfMonth(today),\n            to: endToday,\n          };\n        case \"lastMonth\": {\n          const lastMonth = subMonths(today, 1);\n          return {\n            from: startOfMonth(lastMonth),\n            to: endOfMonth(lastMonth),\n          };\n        }\n        default:\n          throw new Error(`Unknown date range preset: ${presetName}`);\n      }\n    },\n    [],\n  );\n\n  const setPreset = (preset: string): void => {\n    const newRange = getPresetRange(preset);\n    setRange(newRange);\n    setSelectedPreset(preset);\n    if (newRange.from) {\n      setCalendarMonths([newRange.from, addMonths(newRange.from, 1)]);\n    }\n  };\n\n  const checkPreset = React.useCallback(() => {\n    if (!range.from || !range.to) return;\n\n    for (const preset of PRESETS) {\n      const presetRange = getPresetRange(preset.name);\n      if (\n        isEqual(startOfDay(range.from), startOfDay(presetRange.from!)) &&\n        isEqual(endOfDay(range.to), endOfDay(presetRange.to!))\n      ) {\n        setSelectedPreset(preset.name);\n        return;\n      }\n    }\n    setSelectedPreset(undefined);\n  }, [range, getPresetRange]);\n\n  const resetValues = (): void => {\n    setRange({\n      from: getDateAdjustedForTimezone(initialDateFrom),\n      to: getDateAdjustedForTimezone(initialDateTo),\n    });\n    setSelectedPreset(undefined);\n    setCalendarMonths([new Date(), addMonths(new Date(), 1)]);\n  };\n\n  React.useEffect(() => {\n    checkPreset();\n  }, [checkPreset]);\n\n  const PresetButton = ({\n    preset,\n    label,\n    isSelected,\n  }: {\n    preset: string;\n    label: string;\n    isSelected: boolean;\n  }) => (\n    <Button\n      className={cn(\"justify-start\", isSelected && \"bg-muted\")}\n      variant=\"ghost\"\n      onClick={() => setPreset(preset)}\n    >\n      <CheckIcon\n        className={cn(\"mr-2 h-4 w-4\", isSelected ? \"opacity-100\" : \"opacity-0\")}\n      />\n      {label}\n    </Button>\n  );\n\n  const areRangesEqual = (a?: DateTimeRange, b?: DateTimeRange): boolean => {\n    if (!a || !b) return a === b;\n    return (\n      isEqual(a.from || new Date(), b.from || new Date()) &&\n      isEqual(a.to || new Date(), b.to || new Date())\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      openedRangeRef.current = range;\n    }\n  }, [isOpen, range]);\n\n  const handleFromDateTimeChange = (date: Date) => {\n    setRange((prev) => ({ ...prev, from: date }));\n  };\n\n  const handleToDateTimeChange = (date: Date) => {\n    setRange((prev) => ({ ...prev, to: date }));\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full sm:w-[300px] justify-start text-left text-[11px] font-normal text-wrap\",\n            className,\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {formatDateTime(range.from, locale)}\n          {range.to && (\n            <>\n              <ChevronRightIcon className=\"mx-2 h-4 w-4\" />\n              {formatDateTime(range.to, locale)}\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align={align} sideOffset={4}>\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          {/* Calendar Section */}\n          <div className=\"space-y-4 p-4\">\n            <div className=\"hidden lg:flex space-x-4\">\n              {/* Two calendars side by side for desktop */}\n              <Calendar\n                mode=\"range\"\n                selected={range}\n                onSelect={(newRange) =>\n                  newRange && setRange(newRange as DateTimeRange)\n                }\n                month={calendarMonths[0]}\n                onMonthChange={(month) =>\n                  setCalendarMonths([month, addMonths(month, 1)])\n                }\n                className=\"border rounded-md\"\n              />\n              <Calendar\n                mode=\"range\"\n                selected={range}\n                onSelect={(newRange) =>\n                  newRange && setRange(newRange as DateTimeRange)\n                }\n                month={calendarMonths[1]}\n                onMonthChange={(month) =>\n                  setCalendarMonths([subMonths(month, 1), month])\n                }\n                className=\"border rounded-md\"\n              />\n            </div>\n\n            {/* Single calendar for mobile */}\n            <div className=\"lg:hidden\">\n              <Calendar\n                mode=\"range\"\n                selected={range}\n                onSelect={(newRange) =>\n                  newRange && setRange(newRange as DateTimeRange)\n                }\n                className=\"border rounded-md\"\n              />\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <DateTimeInput\n                value={range.from}\n                onChange={handleFromDateTimeChange}\n                label=\"Start\"\n              />\n              <ChevronRightIcon className=\"mx-2 h-4 w-4\" />\n              <DateTimeInput\n                value={range.to}\n                onChange={handleToDateTimeChange}\n                label=\"End\"\n              />\n            </div>\n          </div>\n\n          {/* Presets Section */}\n          <div className=\"lg:border-l lg:pl-4 space-y-2 p-4\">\n            <h3 className=\"font-medium text-sm\">Presets</h3>\n            <div className=\"grid grid-cols-2 lg:grid-cols-1 gap-1\">\n              {PRESETS.map((preset) => (\n                <PresetButton\n                  key={preset.name}\n                  preset={preset.name}\n                  label={preset.label}\n                  isSelected={selectedPreset === preset.name}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"flex items-center justify-end gap-2 p-4 border-t\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => {\n              setIsOpen(false);\n              resetValues();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n              if (!areRangesEqual(range, openedRangeRef.current)) {\n                onUpdate?.({ range });\n              }\n            }}\n          >\n            Update\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nDateTimeRangePicker.displayName = \"DateTimeRangePicker\";\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/date-time-range-picker/date-time-input.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\nimport { DateInput } from \"./date-input\";\nimport { TimeInput } from \"./time-input\";\n\ninterface DateTimeInputProps {\n  value?: Date;\n  onChange: (date: Date) => void;\n  disabled?: boolean;\n  className?: string;\n  label?: string;\n}\n\nexport const DateTimeInput: React.FC<DateTimeInputProps> = ({\n  value,\n  onChange,\n  disabled = false,\n  className,\n  label,\n}) => {\n  const [date, setDate] = React.useState<Date>(value || new Date());\n\n  React.useEffect(() => {\n    if (value) {\n      setDate(new Date(value));\n    }\n  }, [value]);\n\n  const handleDateChange = (newDate: Date) => {\n    if (disabled) return;\n\n    const updatedDate = new Date(newDate);\n    if (date) {\n      updatedDate.setHours(\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds(),\n      );\n    }\n\n    setDate(updatedDate);\n    onChange(updatedDate);\n  };\n\n  const handleTimeChange = (newTime: Date) => {\n    if (disabled) return;\n\n    const updatedDate = new Date(date);\n    updatedDate.setHours(\n      newTime.getHours(),\n      newTime.getMinutes(),\n      newTime.getSeconds(),\n      newTime.getMilliseconds(),\n    );\n\n    setDate(updatedDate);\n    onChange(updatedDate);\n  };\n\n  return (\n    <div className={cn(\"flex flex-col space-y-1\", className)}>\n      {label && <span className=\"text-xs text-muted-foreground\">{label}</span>}\n      <div className=\"flex flex-col sm:flex-row gap-2\">\n        <DateInput\n          value={date}\n          onChange={handleDateChange}\n          disabled={disabled}\n        />\n        <TimeInput\n          value={date}\n          onChange={handleTimeChange}\n          disabled={disabled}\n        />\n      </div>\n    </div>\n  );\n};\n\nDateTimeInput.displayName = \"DateTimeInput\";\n",
      "type": "registry:component"
    }
  ]
}
