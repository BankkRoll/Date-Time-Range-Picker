{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-range-picker",
  "type": "registry:component",
  "title": "Date Range Picker",
  "description": "A component for selecting a range of dates with presets.",
  "dependencies": ["date-fns", "date-fns/locale", "lucide-react"],
  "registryDependencies": [
    "button",
    "calendar",
    "label",
    "popover",
    "select",
    "switch"
  ],
  "files": [
    {
      "path": "registry/default/date-time-range-picker/date-range-picker.tsx",
      "content": "/* eslint-disable max-lines */\n\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { CheckIcon, ChevronDownIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { DateInput } from \"./date-input\";\n\nexport interface DateRange {\n  from: Date;\n  to: Date | undefined;\n}\n\ninterface Preset {\n  name: string;\n  label: string;\n}\n\nconst PRESETS: Preset[] = [\n  { name: \"today\", label: \"Today\" },\n  { name: \"yesterday\", label: \"Yesterday\" },\n  { name: \"last7\", label: \"Last 7 days\" },\n  { name: \"last14\", label: \"Last 14 days\" },\n  { name: \"last30\", label: \"Last 30 days\" },\n  { name: \"thisWeek\", label: \"This Week\" },\n  { name: \"lastWeek\", label: \"Last Week\" },\n  { name: \"thisMonth\", label: \"This Month\" },\n  { name: \"lastMonth\", label: \"Last Month\" },\n];\n\nexport interface DateRangePickerProps {\n  onUpdate?: (values: { range: DateRange }) => void;\n  initialDateFrom?: Date | string;\n  initialDateTo?: Date | string;\n  align?: \"start\" | \"center\" | \"end\";\n  locale?: string;\n  className?: string;\n}\n\nconst formatDate = (date: Date, locale = \"en-us\"): string => {\n  return date.toLocaleDateString(locale, {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n};\n\nconst getDateAdjustedForTimezone = (dateInput: Date | string): Date => {\n  if (typeof dateInput === \"string\") {\n    const parts = dateInput.split(\"-\").map((part) => Number.parseInt(part, 10));\n    return new Date(parts[0], parts[1] - 1, parts[2]);\n  }\n  return dateInput;\n};\n\nexport const DateRangePicker: React.FC<DateRangePickerProps> = ({\n  initialDateFrom = new Date(new Date().setHours(0, 0, 0, 0)),\n  initialDateTo,\n  onUpdate,\n  align = \"center\",\n  locale = \"en-US\",\n  className,\n}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [range, setRange] = React.useState<DateRange>({\n    from: getDateAdjustedForTimezone(initialDateFrom),\n    to: initialDateTo\n      ? getDateAdjustedForTimezone(initialDateTo)\n      : getDateAdjustedForTimezone(initialDateFrom),\n  });\n\n  const openedRangeRef = React.useRef<DateRange>(range);\n  const [selectedPreset, setSelectedPreset] = React.useState<\n    string | undefined\n  >(undefined);\n  const [calendarMonths, setCalendarMonths] = React.useState<[Date, Date]>([\n    new Date(),\n    new Date(new Date().setMonth(new Date().getMonth() + 1)),\n  ]);\n\n  const getPresetRange = React.useCallback((presetName: string): DateRange => {\n    const now = new Date();\n    const today = new Date(now.setHours(0, 0, 0, 0));\n    const endToday = new Date(now.setHours(23, 59, 59, 999));\n\n    switch (presetName) {\n      case \"today\":\n        return { from: today, to: endToday };\n      case \"yesterday\": {\n        const yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        return {\n          from: yesterday,\n          to: new Date(yesterday.setHours(23, 59, 59, 999)),\n        };\n      }\n      case \"last7\":\n        return {\n          from: new Date(today.setDate(today.getDate() - 6)),\n          to: endToday,\n        };\n      case \"last14\":\n        return {\n          from: new Date(today.setDate(today.getDate() - 13)),\n          to: endToday,\n        };\n      case \"last30\":\n        return {\n          from: new Date(today.setDate(today.getDate() - 29)),\n          to: endToday,\n        };\n      case \"thisWeek\": {\n        const first = today.getDate() - today.getDay();\n        return { from: new Date(today.setDate(first)), to: endToday };\n      }\n      case \"lastWeek\": {\n        const first = today.getDate() - today.getDay() - 7;\n        const last = first + 6;\n        return {\n          from: new Date(today.setDate(first)),\n          to: new Date(today.setDate(last)),\n        };\n      }\n      case \"thisMonth\": {\n        return {\n          from: new Date(today.setDate(1)),\n          to: endToday,\n        };\n      }\n      case \"lastMonth\": {\n        const lastMonth = new Date(today.setMonth(today.getMonth() - 1));\n        return {\n          from: new Date(lastMonth.setDate(1)),\n          to: new Date(lastMonth.setDate(0)),\n        };\n      }\n      default:\n        throw new Error(`Unknown date range preset: ${presetName}`);\n    }\n  }, []);\n\n  const setPreset = (preset: string): void => {\n    const newRange = getPresetRange(preset);\n    setRange(newRange);\n    setSelectedPreset(preset);\n    if (newRange.from) {\n      setCalendarMonths([\n        newRange.from,\n        new Date(newRange.from.setMonth(newRange.from.getMonth() + 1)),\n      ]);\n    }\n  };\n\n  const checkPreset = React.useCallback(() => {\n    for (const preset of PRESETS) {\n      const presetRange = getPresetRange(preset.name);\n      if (\n        presetRange.from.getTime() === range.from.getTime() &&\n        presetRange.to?.getTime() === range.to?.getTime()\n      ) {\n        setSelectedPreset(preset.name);\n        return;\n      }\n    }\n    setSelectedPreset(undefined);\n  }, [range, getPresetRange]);\n\n  const resetValues = (): void => {\n    setRange({\n      from: getDateAdjustedForTimezone(initialDateFrom),\n      to: initialDateTo\n        ? getDateAdjustedForTimezone(initialDateTo)\n        : getDateAdjustedForTimezone(initialDateFrom),\n    });\n    setSelectedPreset(undefined);\n    setCalendarMonths([\n      new Date(),\n      new Date(new Date().setMonth(new Date().getMonth() + 1)),\n    ]);\n  };\n\n  React.useEffect(() => {\n    checkPreset();\n  }, [checkPreset]);\n\n  const PresetButton = ({\n    preset,\n    label,\n    isSelected,\n  }: {\n    preset: string;\n    label: string;\n    isSelected: boolean;\n  }) => (\n    <Button\n      className={cn(\"justify-start\", isSelected && \"bg-muted\")}\n      variant=\"ghost\"\n      onClick={() => setPreset(preset)}\n    >\n      <CheckIcon\n        className={cn(\"mr-2 h-4 w-4\", isSelected ? \"opacity-100\" : \"opacity-0\")}\n      />\n      {label}\n    </Button>\n  );\n\n  const areRangesEqual = (a?: DateRange, b?: DateRange): boolean => {\n    if (!a || !b) return a === b;\n    return (\n      a.from.getTime() === b.from.getTime() &&\n      (!a.to || !b.to || a.to.getTime() === b.to.getTime())\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      openedRangeRef.current = range;\n    }\n  }, [isOpen, range]);\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className={cn(\n            \"w-full sm:w-[300px] justify-start text-left text-[11px] font-normal text-wrap\",\n            className,\n          )}\n        >\n          {formatDate(range.from, locale)}\n          {range.to && (\n            <>\n              <ChevronDownIcon className=\"mx-2 h-4 w-4\" />\n              {formatDate(range.to, locale)}\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align={align} sideOffset={4}>\n        <div className=\"flex flex-col lg:flex-row gap-4 p-4\">\n          {/* Calendar Section */}\n          <div className=\"space-y-4\">\n            <div className=\"hidden lg:flex space-x-4\">\n              {/* Two calendars side by side for desktop */}\n              <Calendar\n                mode=\"range\"\n                selected={range}\n                onSelect={(newRange) =>\n                  newRange && setRange(newRange as DateRange)\n                }\n                month={calendarMonths[0]}\n                onMonthChange={(month) =>\n                  setCalendarMonths([\n                    month,\n                    new Date(month.setMonth(month.getMonth() + 1)),\n                  ])\n                }\n                className=\"border rounded-md\"\n              />\n              <Calendar\n                mode=\"range\"\n                selected={range}\n                onSelect={(newRange) =>\n                  newRange && setRange(newRange as DateRange)\n                }\n                month={calendarMonths[1]}\n                onMonthChange={(month) =>\n                  setCalendarMonths([\n                    new Date(month.setMonth(month.getMonth() - 1)),\n                    month,\n                  ])\n                }\n                className=\"border rounded-md\"\n              />\n            </div>\n\n            {/* Single calendar for mobile */}\n            <div className=\"lg:hidden\">\n              <Calendar\n                mode=\"range\"\n                selected={range}\n                onSelect={(newRange) =>\n                  newRange && setRange(newRange as DateRange)\n                }\n                className=\"border rounded-md\"\n              />\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <DateInput\n                value={range.from}\n                onChange={(date) => {\n                  const toDate =\n                    range.to == null || date > range.to ? date : range.to;\n                  setRange((prevRange) => ({\n                    ...prevRange,\n                    from: date,\n                    to: toDate,\n                  }));\n                }}\n              />\n              <ChevronDownIcon className=\"mx-2 h-4 w-4\" />\n              <DateInput\n                value={range.to}\n                onChange={(date) => {\n                  const fromDate = date < range.from ? date : range.from;\n                  setRange((prevRange) => ({\n                    ...prevRange,\n                    from: fromDate,\n                    to: date,\n                  }));\n                }}\n              />\n            </div>\n          </div>\n\n          {/* Presets Section */}\n          <div className=\"lg:border-l lg:pl-4 space-y-2\">\n            <h3 className=\"font-medium text-sm\">Presets</h3>\n            <div className=\"grid grid-cols-2 lg:grid-cols-1 gap-1\">\n              {PRESETS.map((preset) => (\n                <PresetButton\n                  key={preset.name}\n                  preset={preset.name}\n                  label={preset.label}\n                  isSelected={selectedPreset === preset.name}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"flex items-center justify-end gap-2 p-4 border-t\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => {\n              setIsOpen(false);\n              resetValues();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n              if (!areRangesEqual(range, openedRangeRef.current)) {\n                onUpdate?.({ range });\n              }\n            }}\n          >\n            Update\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nDateRangePicker.displayName = \"DateRangePicker\";\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/date-time-range-picker/date-input.tsx",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\n\ninterface DateInputProps {\n  value?: Date;\n  onChange: (date: Date) => void;\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DateParts {\n  day: number;\n  month: number;\n  year: number;\n}\n\nconst DateInput: React.FC<DateInputProps> = ({\n  value,\n  onChange,\n  disabled = false,\n  className,\n}) => {\n  const [date, setDate] = React.useState<DateParts>(() => {\n    const d = value ? new Date(value) : new Date();\n    return {\n      day: d.getDate(),\n      month: d.getMonth() + 1,\n      year: d.getFullYear(),\n    };\n  });\n\n  const monthRef = React.useRef<HTMLInputElement | null>(null);\n  const dayRef = React.useRef<HTMLInputElement | null>(null);\n  const yearRef = React.useRef<HTMLInputElement | null>(null);\n\n  React.useEffect(() => {\n    const d = value ? new Date(value) : new Date();\n    setDate({\n      day: d.getDate(),\n      month: d.getMonth() + 1,\n      year: d.getFullYear(),\n    });\n  }, [value]);\n\n  const validateDate = (field: keyof DateParts, value: number): boolean => {\n    if (\n      (field === \"day\" && (value < 1 || value > 31)) ||\n      (field === \"month\" && (value < 1 || value > 12)) ||\n      (field === \"year\" && (value < 1000 || value > 9999))\n    ) {\n      return false;\n    }\n\n    const newDate = { ...date, [field]: value };\n    const d = new Date(newDate.year, newDate.month - 1, newDate.day);\n    return (\n      d.getFullYear() === newDate.year &&\n      d.getMonth() + 1 === newDate.month &&\n      d.getDate() === newDate.day\n    );\n  };\n\n  const handleInputChange =\n    (field: keyof DateParts) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) return;\n\n      const newValue = e.target.value ? Number(e.target.value) : \"\";\n      const isValid =\n        typeof newValue === \"number\" && validateDate(field, newValue);\n\n      const newDate = { ...date, [field]: newValue };\n      setDate(newDate);\n\n      if (isValid) {\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n      }\n    };\n\n  const initialDate = React.useRef<DateParts>(date);\n\n  const handleBlur =\n    (field: keyof DateParts) =>\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      if (disabled) return;\n\n      if (!e.target.value) {\n        setDate(initialDate.current);\n        return;\n      }\n\n      const newValue = Number(e.target.value);\n      const isValid = validateDate(field, newValue);\n\n      if (!isValid) {\n        setDate(initialDate.current);\n      } else {\n        initialDate.current = { ...date, [field]: newValue };\n      }\n    };\n\n  const handleKeyDown =\n    (field: keyof DateParts) => (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (disabled) return;\n\n      if (e.metaKey || e.ctrlKey) {\n        return;\n      }\n\n      if (\n        !/^[0-9]$/.test(e.key) &&\n        ![\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"ArrowRight\",\n          \"Delete\",\n          \"Tab\",\n          \"Backspace\",\n          \"Enter\",\n        ].includes(e.key)\n      ) {\n        e.preventDefault();\n        return;\n      }\n\n      if (e.key === \"ArrowUp\") {\n        e.preventDefault();\n        let newDate = { ...date };\n\n        if (field === \"day\") {\n          if (date[field] === new Date(date.year, date.month, 0).getDate()) {\n            newDate = { ...newDate, day: 1, month: (date.month % 12) + 1 };\n            if (newDate.month === 1) newDate.year += 1;\n          } else {\n            newDate.day += 1;\n          }\n        }\n\n        if (field === \"month\") {\n          if (date[field] === 12) {\n            newDate = { ...newDate, month: 1, year: date.year + 1 };\n          } else {\n            newDate.month += 1;\n          }\n        }\n\n        if (field === \"year\") {\n          newDate.year += 1;\n        }\n\n        setDate(newDate);\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n      } else if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        let newDate = { ...date };\n\n        if (field === \"day\") {\n          if (date[field] === 1) {\n            newDate.month -= 1;\n            if (newDate.month === 0) {\n              newDate.month = 12;\n              newDate.year -= 1;\n            }\n            newDate.day = new Date(newDate.year, newDate.month, 0).getDate();\n          } else {\n            newDate.day -= 1;\n          }\n        }\n\n        if (field === \"month\") {\n          if (date[field] === 1) {\n            newDate = { ...newDate, month: 12, year: date.year - 1 };\n          } else {\n            newDate.month -= 1;\n          }\n        }\n\n        if (field === \"year\") {\n          newDate.year -= 1;\n        }\n\n        setDate(newDate);\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day));\n      }\n\n      if (e.key === \"ArrowRight\") {\n        if (\n          e.currentTarget.selectionStart === e.currentTarget.value.length ||\n          (e.currentTarget.selectionStart === 0 &&\n            e.currentTarget.selectionEnd === e.currentTarget.value.length)\n        ) {\n          e.preventDefault();\n          if (field === \"month\") dayRef.current?.focus();\n          if (field === \"day\") yearRef.current?.focus();\n        }\n      } else if (e.key === \"ArrowLeft\") {\n        if (\n          e.currentTarget.selectionStart === 0 ||\n          (e.currentTarget.selectionStart === 0 &&\n            e.currentTarget.selectionEnd === e.currentTarget.value.length)\n        ) {\n          e.preventDefault();\n          if (field === \"day\") monthRef.current?.focus();\n          if (field === \"year\") dayRef.current?.focus();\n        }\n      }\n    };\n\n  return (\n    <div\n      className={cn(\n        \"flex border rounded-lg items-center text-sm px-1\",\n        className,\n      )}\n    >\n      <Input\n        type=\"text\"\n        ref={monthRef}\n        max={12}\n        maxLength={2}\n        value={date.month.toString()}\n        onChange={handleInputChange(\"month\")}\n        onKeyDown={handleKeyDown(\"month\")}\n        onFocus={(e) => {\n          if (window.innerWidth > 1024) {\n            e.target.select();\n          }\n        }}\n        onBlur={handleBlur(\"month\")}\n        className=\"p-0 outline-none w-6 border-none text-center\"\n        placeholder=\"M\"\n        disabled={disabled}\n      />\n      <span className=\"opacity-20 -mx-px\">/</span>\n      <Input\n        type=\"text\"\n        ref={dayRef}\n        max={31}\n        maxLength={2}\n        value={date.day.toString()}\n        onChange={handleInputChange(\"day\")}\n        onKeyDown={handleKeyDown(\"day\")}\n        onFocus={(e) => {\n          if (window.innerWidth > 1024) {\n            e.target.select();\n          }\n        }}\n        onBlur={handleBlur(\"day\")}\n        className=\"p-0 outline-none w-7 border-none text-center\"\n        placeholder=\"D\"\n        disabled={disabled}\n      />\n      <span className=\"opacity-20 -mx-px\">/</span>\n      <Input\n        type=\"text\"\n        ref={yearRef}\n        max={9999}\n        maxLength={4}\n        value={date.year.toString()}\n        onChange={handleInputChange(\"year\")}\n        onKeyDown={handleKeyDown(\"year\")}\n        onFocus={(e) => {\n          if (window.innerWidth > 1024) {\n            e.target.select();\n          }\n        }}\n        onBlur={handleBlur(\"year\")}\n        className=\"p-0 outline-none w-12 border-none text-center\"\n        placeholder=\"YYYY\"\n        disabled={disabled}\n      />\n    </div>\n  );\n};\n\nDateInput.displayName = \"DateInput\";\n\nexport { DateInput };\n",
      "type": "registry:component"
    }
  ]
}
