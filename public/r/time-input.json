{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "time-input",
  "type": "registry:component",
  "title": "Time Input",
  "description": "A component for inputting time with hours, minutes, and AM/PM.",
  "dependencies": ["lucide-react"],
  "registryDependencies": ["input", "button"],
  "files": [
    {
      "path": "registry/default/date-time-range-picker/time-input.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface TimeInputProps {\n  value?: Date;\n  onChange: (date: Date) => void;\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface TimeParts {\n  hours: number;\n  minutes: number;\n  ampm: \"AM\" | \"PM\";\n}\n\nexport const TimeInput: React.FC<TimeInputProps> = ({\n  value,\n  onChange,\n  disabled = false,\n  className,\n}) => {\n  const [time, setTime] = React.useState<TimeParts>(() => {\n    const d = value ? new Date(value) : new Date();\n    const hours = d.getHours();\n    return {\n      hours: hours % 12 === 0 ? 12 : hours % 12,\n      minutes: d.getMinutes(),\n      ampm: hours >= 12 ? \"PM\" : \"AM\",\n    };\n  });\n\n  const hoursRef = React.useRef<HTMLInputElement | null>(null);\n  const minutesRef = React.useRef<HTMLInputElement | null>(null);\n\n  React.useEffect(() => {\n    if (value) {\n      const d = new Date(value);\n      const hours = d.getHours();\n      setTime({\n        hours: hours % 12 === 0 ? 12 : hours % 12,\n        minutes: d.getMinutes(),\n        ampm: hours >= 12 ? \"PM\" : \"AM\",\n      });\n    }\n  }, [value]);\n\n  const updateTime = (newTime: TimeParts) => {\n    if (disabled) return;\n\n    const currentDate = value ? new Date(value) : new Date();\n    const hours =\n      newTime.ampm === \"PM\" && newTime.hours !== 12\n        ? newTime.hours + 12\n        : newTime.ampm === \"AM\" && newTime.hours === 12\n          ? 0\n          : newTime.hours;\n\n    currentDate.setHours(hours);\n    currentDate.setMinutes(newTime.minutes);\n    currentDate.setSeconds(0);\n\n    onChange(currentDate);\n    setTime(newTime);\n  };\n\n  const handleInputChange =\n    (field: keyof TimeParts) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) return;\n\n      const value = e.target.value.replace(/\\D/g, \"\");\n      if (!value) return;\n\n      const numValue = Number.parseInt(value, 10);\n\n      let newValue: number | string = numValue;\n      if (field === \"hours\") {\n        if (numValue < 1) newValue = 1;\n        else if (numValue > 12) newValue = 12;\n      } else if (field === \"minutes\") {\n        if (numValue < 0) newValue = 0;\n        else if (numValue > 59) newValue = 59;\n      }\n\n      updateTime({ ...time, [field]: newValue });\n    };\n\n  const handleAmPmToggle = () => {\n    if (disabled) return;\n    updateTime({ ...time, ampm: time.ampm === \"AM\" ? \"PM\" : \"AM\" });\n  };\n\n  const incrementHours = () => {\n    if (disabled) return;\n    const newHours = time.hours === 12 ? 1 : time.hours + 1;\n    updateTime({ ...time, hours: newHours });\n  };\n\n  const decrementHours = () => {\n    if (disabled) return;\n    const newHours = time.hours === 1 ? 12 : time.hours - 1;\n    updateTime({ ...time, hours: newHours });\n  };\n\n  const incrementMinutes = () => {\n    if (disabled) return;\n    const newMinutes = (time.minutes + 1) % 60;\n    updateTime({ ...time, minutes: newMinutes });\n  };\n\n  const decrementMinutes = () => {\n    if (disabled) return;\n    const newMinutes = (time.minutes - 1 + 60) % 60;\n    updateTime({ ...time, minutes: newMinutes });\n  };\n\n  const formatTimeValue = (value: number): string => {\n    return value.toString().padStart(2, \"0\");\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center space-x-1 rounded-md border p-1\",\n        className,\n      )}\n    >\n      <div className=\"flex flex-col\">\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-5 w-5\"\n          onClick={incrementHours}\n          disabled={disabled}\n        >\n          <ChevronUp className=\"h-3 w-3\" />\n        </Button>\n        <Input\n          ref={hoursRef}\n          type=\"text\"\n          inputMode=\"numeric\"\n          value={formatTimeValue(time.hours)}\n          onChange={handleInputChange(\"hours\")}\n          className=\"w-7 border-0 text-center focus:outline-none focus:ring-0 p-0 disabled:opacity-50\"\n          disabled={disabled}\n        />\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-5 w-5\"\n          onClick={decrementHours}\n          disabled={disabled}\n        >\n          <ChevronDown className=\"h-3 w-3\" />\n        </Button>\n      </div>\n      <span className=\"text-sm font-medium\">:</span>\n      <div className=\"flex flex-col\">\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-5 w-5\"\n          onClick={incrementMinutes}\n          disabled={disabled}\n        >\n          <ChevronUp className=\"h-3 w-3\" />\n        </Button>\n        <Input\n          ref={minutesRef}\n          type=\"text\"\n          inputMode=\"numeric\"\n          value={formatTimeValue(time.minutes)}\n          onChange={handleInputChange(\"minutes\")}\n          className=\"w-7 border-0 text-center focus:outline-none focus:ring-0 p-0 disabled:opacity-50\"\n          disabled={disabled}\n        />\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-5 w-5\"\n          onClick={decrementMinutes}\n          disabled={disabled}\n        >\n          <ChevronDown className=\"h-3 w-3\" />\n        </Button>\n      </div>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"text-xs px-2 h-8\"\n        onClick={handleAmPmToggle}\n        disabled={disabled}\n      >\n        {time.ampm}\n      </Button>\n    </div>\n  );\n};\n\nTimeInput.displayName = \"TimeInput\";\n",
      "type": "registry:component"
    }
  ]
}
